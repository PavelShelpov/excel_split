# copy_excel.py
import os
import shutil
import openpyxl

def get_all_sheets_headers(file_path, max_scan_rows=10):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –ª–∏—Å—Ç—ã –≤ Excel-—Ñ–∞–π–ª–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ."""
    try:
        wb = openpyxl.load_workbook(file_path, read_only=True)
        sheet_results = {}
        
        for ws in wb.worksheets:
            max_non_empty = 0
            header_row = None
            header_row_idx = 0

            # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö
            for row_idx, row in enumerate(ws.iter_rows(min_row=1, max_row=max_scan_rows), start=1):
                non_empty_count = sum(1 for cell in row if cell.value is not None)
                if non_empty_count > max_non_empty:
                    max_non_empty = non_empty_count
                    header_row = row
                    header_row_idx = row_idx

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if max_non_empty > 0:
                headers = [cell.value for cell in header_row if cell.value is not None]
                sheet_results[ws.title] = (headers, header_row_idx)
            else:
                sheet_results[ws.title] = (None, None)
                
        return sheet_results
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Excel: {str(e)}")

def main():
    print("=== –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Excel-—Ñ–∞–π–ª–∞ ===")
    
    # –ó–∞–ø—Ä–æ—Å –ø—É—Ç–µ–π
    source = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É Excel-—Ñ–∞–π–ª—É: ").strip('"')
    destination = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ü–µ–ª–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ").strip('"')
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–µ–π
    source = os.path.normpath(source)
    destination = os.path.normpath(destination)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not os.path.exists(source):
        print(f"‚ùå –û—à–∏–±–∫–∞: –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {source}")
        return
    if not os.path.isfile(source):
        print(f"‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º: {source}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è .xlsx
    if not source.lower().endswith('.xlsx'):
        print("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .xlsx")
        return
    
    # –ê–Ω–∞–ª–∏–∑ Excel: –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤–æ –≤—Å–µ—Ö –ª–∏—Å—Ç–∞—Ö
    try:
        sheet_headers = get_all_sheets_headers(source)
        valid_sheets = {sheet: data for sheet, data in sheet_headers.items() if data[0] is not None}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not valid_sheets:
            print("‚ùå –û—à–∏–±–∫–∞: –ù–∏ –≤ –æ–¥–Ω–æ–º –ª–∏—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏")
            return
        
        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ª–∏—Å—Ç–∞–º
        print("\nüîç –ê–Ω–∞–ª–∏–∑ –ª–∏—Å—Ç–æ–≤:")
        for sheet, (headers, row_idx) in sheet_headers.items():
            if headers is None:
                print(f"  - {sheet}: –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                print(f"  - {sheet} (—Å—Ç—Ä–æ–∫–∞ {row_idx}): {', '.join(str(h) for h in headers)}")
        
        # –ü–æ–∏—Å–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        all_headers = [set(headers) for headers, _ in valid_sheets.values()]
        common_headers = set.intersection(*all_headers)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if not common_headers:
            print("\n‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—â–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –º–µ–∂–¥—É –ª–∏—Å—Ç–∞–º–∏")
        else:
            print(f"\n‚úÖ –û–±—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤–æ –≤—Å–µ—Ö –ª–∏—Å—Ç–∞—Ö: {', '.join(common_headers)}")
    except Exception as e:
        print(f"‚ùå {str(e)}")
        return
    
    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    os.makedirs(destination, exist_ok=True)
    try:
        shutil.copy2(source, destination)
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤: {os.path.join(destination, os.path.basename(source))}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

if __name__ == "__main__":
    main()